
#Test functions
def test_make_dataframe_from_TFs_list():
    """
    Runs on the full TFs list and show return full TFsdf.xlsx in input files.
    """
    import time
    import TFsdf as t

    start = time.perf_counter()
    TFsdf, TFs_dict_of_dict = t.make_dataframe_from_TFs_list("inputfiles/TFs.xlsx", "inputfiles/dmel-all-chromosome-r6.48.fasta", "inputfiles/dmel-all-r6.48.gtf")
    TFsdf.to_excel("inputfiles/mockMaterials/TFsdf.xlsx")
    stop = time.perf_counter()
    print(f"Ran functions in {stop - start:0.4f} seconds. Output has been returned as TFsdf.xlsx")

def test_designPrimers():
    """
    Runs on an example template for Val-F.
    """
    import time
    import primersFunctions as u

    exampleTemplate = "TTTGTGGGCGTGGCAAATAGTTGTTTGGCAAATCGCTGCGATGGGAGATAGCTTAGTTAACGAAGATAAGGCTGCATAGCTGCGGTGGCGCATAGTTGAACTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGGCTTTACTTGTTCGAGTGACAGCAGCCGACTCGTTGTTGCCGCTGTCACACCTGTTAAGTAAGTGAATCGGGCAGTGGGTGTACTTGGATGCGGCTACGGC"
    expectedPotentialPrimers = ['GGTTACGCCATTCCTTACACC', 'TGGTTACGCCATTCCTTACACC', 'ACGCCATTCCTTACACCTAC', 'TGGTTACGCCATTCCTTACAC', 'CCAAAAACACATTGGTTACGCC', 'CCGCCATACCAAAAACACATTG', 'TCTACCGCCATACCAAAAACAC', 'CTACCGCCATACCAAAAACAC', 'TTCTACCGCCATACCAAAAACAC', 'ACCGCCATACCAAAAACACATTG', 'TACGCCATTCCTTACACCTAC', 'GTTACGCCATTCCTTACACCTAC', 'TTTCTACCGCCATACCAAAAACAC', 'TTACGCCATTCCTTACACCTAC', 'TACCGCCATACCAAAAACACATTG', 'TTTCTACCGCCATACCAAAAAC', 'GGTTACGCCATTCCTTACACCTAC', 'ATTTCTACCGCCATACCAAAAAC', 'ATTTCTACCGCCATACCAAAAACAC', 'AATTTCTACCGCCATACCAAAAAC', 'CTACCGCCATACCAAAAACACATTG', 'AAATTTCTACCGCCATACCAAAAAC', 'TTTGTAAATTTCTACCGCCATACC', 'AATTTCTACCGCCATACCAAAAACAC', 'TTTTGTAAATTTCTACCGCCATACC', 'TAAATTTCTACCGCCATACCAAAAAC', 'ATTTTGTAAATTTCTACCGCCATACC', 'TGGTTACGCCATTCCTTACACCTAC', 'TCTACCGCCATACCAAAAACACATTG']

    start = time.perf_counter()
    success, potential_primers = u.designPrimers(1, "VAL-F", exampleTemplate)
    stop = time.perf_counter()

    if success == True and potential_primers == expectedPotentialPrimers:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    
    print(f"Ran functions in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_stringencyIterate():
    """
    Tests stringency iterate for two example cases with VAL-F. The first uses standard params, the second uses blastSkip to skip 5 primers and the extended region to search.
    
    """
    import time
    import primersFunctions as u

    exampleTemplate = "TTTGTGGGCGTGGCAAATAGTTGTTTGGCAAATCGCTGCGATGGGAGATAGCTTAGTTAACGAAGATAAGGCTGCATAGCTGCGGTGGCGCATAGTTGAACTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGGCTTTACTTGTTCGAGTGACAGCAGCCGACTCGTTGTTGCCGCTGTCACACCTGTTAAGTAAGTGAATCGGGCAGTGGGTGTACTTGGATGCGGCTACGGC"
    expectedStringency1 = 0
    expected_potential_primers1 = ['GGTTACGCCATTCCTTACACC', 'TGGTTACGCCATTCCTTACACC', 'ACGCCATTCCTTACACCTAC', 'TGGTTACGCCATTCCTTACAC', 'CCGCCATACCAAAAACACATTG', 'TCTACCGCCATACCAAAAACAC', 'CTACCGCCATACCAAAAACAC', 'TTCTACCGCCATACCAAAAACAC', 'ACCGCCATACCAAAAACACATTG', 'TACGCCATTCCTTACACCTAC', 'GTTACGCCATTCCTTACACCTAC', 'TTTCTACCGCCATACCAAAAACAC', 'TTACGCCATTCCTTACACCTAC', 'TACCGCCATACCAAAAACACATTG', 'TTTCTACCGCCATACCAAAAAC', 'GGTTACGCCATTCCTTACACCTAC', 'ATTTCTACCGCCATACCAAAAAC', 'ATTTCTACCGCCATACCAAAAACAC', 'AATTTCTACCGCCATACCAAAAAC', 'CTACCGCCATACCAAAAACACATTG', 'AAATTTCTACCGCCATACCAAAAAC', 'TTTGTAAATTTCTACCGCCATACC', 'TTTTGTAAATTTCTACCGCCATACC', 'TGGTTACGCCATTCCTTACACCTAC']
    expectedStringency2 = 0
    expected_potential_primers2 = ['GTGGGCGTGGCAAATAGTTG', 'TCCATCCGTCGGTCATTTCG', 'TCAATAGCCGTGTCGAGCTG', 'GGTGGCGCATAGTTGAACTG', 'TTTGGCAAATCGCTGCGATG', 'ATCGCTGCGATGGGAGATAG', 'TTTGTGGGCGTGGCAAATAG', 'AGCTGGCGATTTGGTCCATC', 'GAGACGCGACAAAGGAAGTG', 'AATCGCTGCGATGGGAGATAG', 'GGCGCATAGTTGAACTGTGTC', 'GTGGCGCATAGTTGAACTGTG', 'TTGGCAAATCGCTGCGATG', 'TGGCGCATAGTTGAACTGTG', 'GTCCATCCGTCGGTCATTTC', 'ACGCGACAAAGGAAGTGAAAC', 'GTGTCGAGCTGGCGATTTG', 'CGGTGGCGCATAGTTGAAC', 'CTGGCGATTTGGTCCATCCG', 'TCGAGCTGGCGATTTGGTC', 'TGGCGATTTGGTCCATCCG', 'ATCAATAGCCGTGTCGAGCTG', 'GTCGAGCTGGCGATTTGGTC', 'GCTGGCGATTTGGTCCATCC', 'GCTGGCGATTTGGTCCATC', 'CGCTGCGATGGGAGATAGC', 'TGTCGAGCTGGCGATTTGG', 'GGATCAATAGCCGTGTCGAG', 'GCGAGACGCGACAAAGGAAG', 'TCGCTGCGATGGGAGATAG', 'GTGTCGAGCTGGCGATTTGG', 'CGCGACAAAGGAAGTGAAAC', 'GCAAATCGCTGCGATGGG', 'GGCAAATCGCTGCGATGG', 'GCGTGGCAAATAGTTGTTTGG', 'GGCGTGGCAAATAGTTGTTTG', 'CGAGACGCGACAAAGGAAG', 'GGTCCATCCGTCGGTCATTTC', 'TCGCTGCGATGGGAGATAGC', 'TGAACGTCTCGATCTCAGGAAC', 'TCCGTCGGTCATTTCGTATG', 'TGGGCGTGGCAAATAGTTG', 'TTGTGGGCGTGGCAAATAG', 'TTGGCAAATCGCTGCGATGG', 'CCGTCGGTCATTTCGTATGAAC', 'CGTGTCGAGCTGGCGATTTG', 'CAATAGCCGTGTCGAGCTG', 'CCATCCGTCGGTCATTTCG', 'GTCCATCCGTCGGTCATTTCG', 'CTGGCGATTTGGTCCATCC', 'CATCCGTCGGTCATTTCGTATG', 'GCGCATAGTTGAACTGTGTC', 'GCGGTGGCGCATAGTTGAAC', 'GACGCGACAAAGGAAGTGAAAC', 'AAATCGCTGCGATGGGAGATAG', 'GTTTGGCAAATCGCTGCGATG', 'GCTGCGATGGGAGATAGCTTAG', 'GAGCTGGCGATTTGGTCCATC', 'ATCCGTCGGTCATTTCGTATG', 'TGTGGGCGTGGCAAATAGTTG', 'TGGCAAATCGCTGCGATGG', 'GAACGTCTCGATCTCAGGAAC', 'TGGCAAATCGCTGCGATG', 'CGAGACGCGACAAAGGAAGTG', 'AGACGCGACAAAGGAAGTG', 'AACGTCTCGATCTCAGGAAC', 'CGAGCTGGCGATTTGGTC', 'GTCGAGCTGGCGATTTGG', 'CTGCGGTGGCGCATAGTTG', 'TGCGGTGGCGCATAGTTG', 'CGGTGGCGCATAGTTGAACTG', 'GGCGTGGCAAATAGTTGTTTGG', 'GGGCGTGGCAAATAGTTGTTTG', 'ATGAACGTCTCGATCTCAGGAAC', 'CTGCGATGGGAGATAGCTTAG', 'GGCGATTTGGTCCATCCG', 'GATCAATAGCCGTGTCGAGCTG', 'ATCGCTGCGATGGGAGATAGC', 'GCGCATAGTTGAACTGTGTCTTC', 'TGGCGCATAGTTGAACTGTGTC', 'GGCAAATCGCTGCGATGGG', 'CGTATGAACGTCTCGATCTCAG', 'CGTCGGTCATTTCGTATGAAC', 'CGTATGAACGTCTCGATCTCAGG', 'TTTGGCAAATCGCTGCGATGG', 'TCCATCCGTCGGTCATTTC', 'TAGCTGCGGTGGCGCATAG', 'TGTCGAGCTGGCGATTTG', 'GTATGAACGTCTCGATCTCAGG', 'TCCGTCGGTCATTTCGTATGAAC', 'GGCGCATAGTTGAACTGTG', 'GTGGCGCATAGTTGAACTG', 'TGTGGGCGTGGCAAATAG', 'TATGAACGTCTCGATCTCAGGAAC', 'TTGTGGGCGTGGCAAATAGTTG', 'GCTGCGATGGGAGATAGC', 'CGCATAGTTGAACTGTGTCTTC', 'GGTGGCGCATAGTTGAACTGTG', 'CGCTGCGATGGGAGATAG', 'TGGTCCATCCGTCGGTCATTTC', 'CCATCCGTCGGTCATTTCGTATG', 'TGGCGATTTGGTCCATCC', 'GCAAATAGTTGTTTGGCAAATCGC', 'CAAATCGCTGCGATGGGAGATAG', 'AATAGCCGTGTCGAGCTG', 'AGACGCGACAAAGGAAGTGAAAC', 'AATCGCTGCGATGGGAGATAGC', 'GCGATGGGAGATAGCTTAGTTAAC', 'CAAATAGTTGTTTGGCAAATCGC', 'GCAAATAGTTGTTTGGCAAATCG', 'ACGTCTCGATCTCAGGAACTATAG', 'CGATGGGAGATAGCTTAGTTAACG', 'ATCCGTCGGTCATTTCGTATGAAC', 'AACGTCTCGATCTCAGGAACTATAG', 'GTGGCGCATAGTTGAACTGTGTC', 'TGCGATGGGAGATAGCTTAGTTAAC', 'CGTCTCGATCTCAGGAACTATAG', 'TGGGCGTGGCAAATAGTTGTTTG', 'TTTGTGGGCGTGGCAAATAGTTG', 'AGTTAACGAAGATAAGGCTGCATAG', 'GTATGAACGTCTCGATCTCAGGAAC', 'TGAACTGTGTCTTCAAAATTCTGG', 'TGGGAGATAGCTTAGTTAACGAAG', 'GTTAACGAAGATAAGGCTGCATAG', 'GCGATGGGAGATAGCTTAGTTAACG', 'GGCGCATAGTTGAACTGTGTCTTC', 'TTGAACTGTGTCTTCAAAATTCTGG', 'GAGACGCGACAAAGGAAGTGAAAC', 'ATGGGAGATAGCTTAGTTAACGAAG', 'TCCATCCGTCGGTCATTTCGTATG', 'CATCCGTCGGTCATTTCGTATGAAC', 'GTTGAACTGTGTCTTCAAAATTCTG']

    #Run test 1
    start = time.perf_counter()
    stringency, potential_primers = u.stringencyIterate(exampleTemplate, "VAL-F")
    stop = time.perf_counter()

    if stringency == expectedStringency1 and potential_primers == expected_potential_primers1:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 1: Ran function for basic case of VAL-F in {stop - start:0.4f} seconds. Test has {testSuccess}.")

    #Run test 2
    start = time.perf_counter()
    stringency, potential_primers = u.stringencyIterate(exampleTemplate, "VAL-F", useExtRegion= True)
    stop = time.perf_counter()

    if stringency == expectedStringency2 and potential_primers == expected_potential_primers2:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 2: Ran function for basic case of VAL-F in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_mountedPrimers():
    """
    Tests two example cases for HAL-R, one for standard mount check and the second to test makeMount function.
    """
    import time
    import primersFunctions as u

    exampleHALRprimers = ['AATAATATTGCAATATGTGTCACTGTTT', 'GTAATAATATTGCAATATGTGTCACTGTT', 'GTAATAATATTGCAATATGTGTCACTGTTT']
    exampleTemplate = "TTTGTGGGCGTGGCAAATAGTTGTTTGGCAAATCGCTGCGATGGGAGATAGCTTAGTTAACGAAGATAAGGCTGCATAGCTGCGGTGGCGCATAGTTGAACTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGGCTTTACTTGTTCGAGTGACAGCAGCCGACTCGTTGTTGCCGCTGTCACACCTGTTAAGTAAGTGAATCGGGCAGTGGGTGTACTTGGATGCGGCTACGGC"
    expectedmountedPrimers1 = ['AAACAGTGACACATATTGCAATATTATT', 'AAACAGTGACACATATTGCAATATTATTAC']
    expectedmountedPrimers2 = ['GTAATAATATTGCAATATGTGTCACTGTTT']

    #Run test 1
    start = time.perf_counter()
    mountedPrimers = u.mountedPrimers("HAL-R", exampleHALRprimers, exampleTemplate)
    stop = time.perf_counter()

    if mountedPrimers == expectedmountedPrimers1:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 1: Ran function for basic case of HAL-R in {stop - start:0.4f} seconds. Test has {testSuccess}.")

    #Run test 2
    start = time.perf_counter()
    mountedPrimers = u.mountedPrimers("HAL-R", exampleHALRprimers, exampleTemplate, makeMount= True)
    stop = time.perf_counter()

    if mountedPrimers == expectedmountedPrimers2:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 2: Ran function for makeMount case of HAL-R in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_addSixPrimers():
    """
    Checks the add six priimers function for the example template.

    """
    import time
    import primersFunctions as u

    exampleTemplate = "TTTGTGGGCGTGGCAAATAGTTGTTTGGCAAATCGCTGCGATGGGAGATAGCTTAGTTAACGAAGATAAGGCTGCATAGCTGCGGTGGCGCATAGTTGAACTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGGCTTTACTTGTTCGAGTGACAGCAGCCGACTCGTTGTTGCCGCTGTCACACCTGTTAAGTAAGTGAATCGGGCAGTGGGTGTACTTGGATGCGGCTACGGC"
    expectedStringencyList = [0, 0, 2, 0, 0, 0]
    expectedSixPrimers = ['GGTTACGCCATTCCTTACACC', 'TCTTGGTTTTTGAATTTTGGCATG', 'AAACAGTGACACATATTGCAATATTATT', 'GATACGACACCAATCTTCCAGTC', 'TCGCACTATTCTTCGAATGTCG', 'GCGGTTGGTTAGGGTTTCAC']

    start = time.perf_counter()
    stringency, sixPrimers = u.addSixPrimers(exampleTemplate)
    stop = time.perf_counter()

    if stringency == expectedStringencyList and sixPrimers == expectedSixPrimers:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Ran function in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_checkSixPrimers():
    """
    Checked with the example template.
    """
    import time
    import primersFunctions as u

    exampleTemplate = "TTTGTGGGCGTGGCAAATAGTTGTTTGGCAAATCGCTGCGATGGGAGATAGCTTAGTTAACGAAGATAAGGCTGCATAGCTGCGGTGGCGCATAGTTGAACTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGGCTTTACTTGTTCGAGTGACAGCAGCCGACTCGTTGTTGCCGCTGTCACACCTGTTAAGTAAGTGAATCGGGCAGTGGGTGTACTTGGATGCGGCTACGGC"
    expectedblastSkip = {'VAL-F': 4, 'HAL-F': 0, 'HAL-R': 0, 'HAR-F': 0, 'HAR-R': 0, 'VAL-R': 0}
    expectedstringencyList = [0, 0, 2, 0, 0, 0]
    expectedextended = False
    expectedsixPrimers = ['CCGCCATACCAAAAACACATTG', 'TCTTGGTTTTTGAATTTTGGCATG', 'AAACAGTGACACATATTGCAATATTATT', 'GATACGACACCAATCTTCCAGTC', 'TCGCACTATTCTTCGAATGTCG', 'GCGGTTGGTTAGGGTTTCAC']

    start = time.perf_counter()
    blastSkip, stringencyList, extended, sixPrimers = u.checkSixPrimers(exampleTemplate, chromosome = 'X')
    stop = time.perf_counter()
    
    if blastSkip == expectedblastSkip and stringencyList == expectedstringencyList and extended == expectedextended and sixPrimers == expectedsixPrimers:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Ran function for basic case in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_BLASTSixPrimers():
    """
    Runs BLAST of a set of sixPrimers which should return no issue, and one with a problematic primer.
    """
    import time
    import primersFunctions as u

    faultySix = ['GGTTACGCCATTCCTTACACC', 'TCTTGGTTTTTGAATTTTGGCATG', 'AAACAGTGACACATATTGCAATATTATT', 'GATACGACACCAATCTTCCAGTC', 'TCGCACTATTCTTCGAATGTCG', 'GCGGTTGGTTAGGGTTTCAC']
    chromosome = 'X'  
    expectedfaultyPrimers1 = ['VAL-F']

    start = time.perf_counter()
    faultyPrimers= u.BLASTSixPrimers(faultySix, 'X')
    stop = time.perf_counter()
    
    if faultyPrimers == expectedfaultyPrimers1:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"ran function for basic case in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_finalPrimersdf():
    """
    Tests on a mock version of TFsdf (only 5 rows). Checks for case where full parameter set is returned.
    """
    import time
    import primersFunctions as u
    import pandas as pd

    TFsdf = pd.read_excel("inputfiles/mockMaterials/mock_TFsdf.xlsx", index_col = 0)
    outputFile = "inputfiles/mockMaterials/mockTFsdfwithPrimers.xlsx"

    start = time.perf_counter()
    faultyPrimers= u.finalPrimersdf(TFsdf, outputFile, returnParameters= True)
    stop = time.perf_counter()
    print(f"ran function for basic case in {stop - start:0.4f} seconds. Output is in mock materials.")


### Run tests ###
test_make_dataframe_from_TFs_list()
#this has been checked, and has ATG/stop codons at 1703 site.

test_designPrimers()
#Checked, returns: Ran functions in 0.0516 seconds. Test has passed.

test_stringencyIterate()
#Checked, returns: 
    # Test 1: Ran function for basic case of VAL-F in 0.0352 seconds. Test has passed.
    # Test 2: Ran function for basic case of VAL-F in 0.0815 seconds. Test has passed.

test_mountedPrimers()
#Checked, returns:
    #Test 1: Ran function for basic case of HAL-R in 0.0052 seconds. Test has passed.
    #Test 2: Ran function for makeMount case of HAL-R in 0.0043 seconds. Test has passed.

test_addSixPrimers()
#Checked, ran function in 0.6519 seconds. Test has passed.

test_checkSixPrimers()
#Checked, ran function for basic case in 17.5511 seconds. Test has passed.

test_BLASTSixPrimers()
#Checked, returns ran function for basic case in 4.0490 seconds. Test has passed.

test_finalPrimersdf()
#Checked, returns ran function for basic case in 33.7917 seconds. Output is in mock materials.