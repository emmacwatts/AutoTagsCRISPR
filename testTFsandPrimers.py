#Need to update some of these for after BLAST function amendment
#(but runs on the full data and subsets so probably ok)

#Test functions
def test_make_dataframe_from_TFs_list():
    """
    Runs on the full TFs list and show return full TFsdf.xlsx in input files.
    """
    import time
    import TFsdf as t

    start = time.perf_counter()
    TFsdf, TFs_dict_of_dict = t.make_dataframe_from_TFs_list("inputfiles/TFs.xlsx", "inputfiles/dmel-all-chromosome-r6.48.fasta", "inputfiles/dmel-all-r6.48.gtf")
    TFsdf.to_excel("inputfiles/mockMaterials/TFsdf.xlsx")
    stop = time.perf_counter()
    print(f"Ran functions in {stop - start:0.4f} seconds. Output has been returned as TFsdf.xlsx")

def test_designPrimers():
    """
    Runs on an example template for Val-F.
    """
    import time
    import primersFunctions as u

    exampleTemplate = "CTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGG"
    expectedPotentialPrimers = ['GGTTACGCCATTCCTTACACC', 'TGGTTACGCCATTCCTTACACC', 'ACGCCATTCCTTACACCTAC', 'TGGTTACGCCATTCCTTACAC', 'CCGCCATACCAAAAACACATTG', 'TCTACCGCCATACCAAAAACAC', 'CTACCGCCATACCAAAAACAC', 'TTCTACCGCCATACCAAAAACAC', 'ACCGCCATACCAAAAACACATTG', 'TACGCCATTCCTTACACCTAC', 'GTTACGCCATTCCTTACACCTAC', 'TTTCTACCGCCATACCAAAAACAC', 'TTACGCCATTCCTTACACCTAC', 'TACCGCCATACCAAAAACACATTG', 'TTTCTACCGCCATACCAAAAAC', 'GGTTACGCCATTCCTTACACCTAC', 'ATTTCTACCGCCATACCAAAAAC', 'ATTTCTACCGCCATACCAAAAACAC', 'AATTTCTACCGCCATACCAAAAAC', 'CTACCGCCATACCAAAAACACATTG', 'AAATTTCTACCGCCATACCAAAAAC', 'TTTGTAAATTTCTACCGCCATACC', 'TTTTGTAAATTTCTACCGCCATACC', 'TGGTTACGCCATTCCTTACACCTAC']
    
    start = time.perf_counter()
    success, potential_primers = u.designPrimers(0, "VAL-F", exampleTemplate)
    stop = time.perf_counter()

    if success == True and potential_primers == expectedPotentialPrimers:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    
    print(f"Ran functions in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_stringencyIterate():
    """
    Tests stringency iterate for two example cases with VAL-F. The first uses standard params, the second uses blastSkip to skip 5 primers and the extended region to search.
    
    """
    import time
    import NprimerFunctions as u

    exampleTemplate = "CTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGG"
    expectedStringency1 = 0
    expected_potential_primers1 = ['GGTTACGCCATTCCTTACACC', 'TGGTTACGCCATTCCTTACACC', 'ACGCCATTCCTTACACCTAC', 'TGGTTACGCCATTCCTTACAC', 'CCGCCATACCAAAAACACATTG', 'TCTACCGCCATACCAAAAACAC', 'CTACCGCCATACCAAAAACAC', 'TTCTACCGCCATACCAAAAACAC', 'ACCGCCATACCAAAAACACATTG', 'TACGCCATTCCTTACACCTAC', 'GTTACGCCATTCCTTACACCTAC', 'TTTCTACCGCCATACCAAAAACAC', 'TTACGCCATTCCTTACACCTAC', 'TACCGCCATACCAAAAACACATTG', 'TTTCTACCGCCATACCAAAAAC', 'GGTTACGCCATTCCTTACACCTAC', 'ATTTCTACCGCCATACCAAAAAC', 'ATTTCTACCGCCATACCAAAAACAC', 'AATTTCTACCGCCATACCAAAAAC', 'CTACCGCCATACCAAAAACACATTG', 'AAATTTCTACCGCCATACCAAAAAC', 'TTTGTAAATTTCTACCGCCATACC', 'TTTTGTAAATTTCTACCGCCATACC', 'TGGTTACGCCATTCCTTACACCTAC']
    expectedStringency2 = 1
    expected_potential_primers2_count = 108 #Using a count output here because it returns too many primers to print reasonably

    #Run test 1
    start = time.perf_counter()
    stringency, potential_primers = u.stringencyIterate(exampleTemplate, "VAL-F")
    stop = time.perf_counter()

    if stringency == expectedStringency1 and potential_primers == expected_potential_primers1:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 1: Ran function for basic case of VAL-F in {stop - start:0.4f} seconds. Test has {testSuccess}.")

    #Run test 2
    start = time.perf_counter()
    stringency, potential_primers = u.stringencyIterate(exampleTemplate, "VAL-F", useExtRegion= True, stringencyStart= 1)
    stop = time.perf_counter()

    if stringency == expectedStringency2 and len(potential_primers) == expected_potential_primers2_count:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 2: Ran function for the extended region and start = 1 case of VAL-F in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_mountedPrimers():
    """
    Tests three example cases: HAL-R for standard mount check and to test makeMount function, then HAR-F for extendMount.
    """
    import time
    import primersFunctions as u

    exampleHALRprimers = ['CGTAATAATATTGCAATATGTGTCACTGT', 'CGTAATAATATTGCAATATGTGTCACTG', 'CGTAATAATATTGCAATATGTGTCACTGTT', 'GTAATAATATTGCAATATGTGTCACTGTT']
    exampleHARFprimers = ['ACGACACCAATCTTCCAGTCC', 'CGACACCAATCTTCCAGTCC', 'TACGACACCAATCTTCCAGTCC', 'ACCAATCTTCCAGTCCAGCTTC', 'CCAATCTTCCAGTCCAGCTTC', 'ACGACACCAATCTTCCAGTC', 'GACACCAATCTTCCAGTCCAG', 'ACACCAATCTTCCAGTCCAG', 'CGACACCAATCTTCCAGTCCAG', 'ATACGACACCAATCTTCCAGTCC', 'TACGACACCAATCTTCCAGTC', 'GATACGACACCAATCTTCCAGTC', 'ATACGACACCAATCTTCCAGTC', 'CACCAATCTTCCAGTCCAGCTTC', 'GATACGACACCAATCTTCCAGTCC', 'ACGACACCAATCTTCCAGTCCAG', 'TACGACACCAATCTTCCAGTCCAG', 'ACACCAATCTTCCAGTCCAGCTTC', 'ATACGACACCAATCTTCCAGTCCAG']
    exampleTemplate = "CTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGG"
    expectedmountedPrimers1 = ['CGTAATAATATTGCAATATGTGTCACTGT', 'CGTAATAATATTGCAATATGTGTCACTG', 'CGTAATAATATTGCAATATGTGTCACTGTT']
    expectedmountedPrimers2 = ['CGTAATAATATTGCAATATGTGTCACTGTT']
    expectedmountedPrimers3 = ['GATACGACACCAATCTTCCAGTCC']

    #Run test 1
    start = time.perf_counter()
    mountedPrimers = u.mountedPrimers("HAL-R", exampleHALRprimers, exampleTemplate)
    stop = time.perf_counter()

    if mountedPrimers == expectedmountedPrimers1:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 1: Ran function for basic case of HAL-R in {stop - start:0.4f} seconds. Test has {testSuccess}.")

    #Run test 2
    start = time.perf_counter()
    mountedPrimers = u.mountedPrimers("HAL-R", exampleHALRprimers, exampleTemplate, makeMount= True)
    stop = time.perf_counter()

    if mountedPrimers == expectedmountedPrimers2:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 2: Ran function for makeMount case of HAL-R in {stop - start:0.4f} seconds. Test has {testSuccess}.")

    #Run test 3
    start = time.perf_counter()
    mountedPrimers = u.mountedPrimers("HAR-F", exampleHARFprimers, exampleTemplate, extendMount= True)
    stop = time.perf_counter()

    if mountedPrimers == expectedmountedPrimers3:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"Test 3: Ran function for extendMount case of HAR-F in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_BLASTprimer():
    
    """
    Tests the alternative BLAST function
    """
    import time
    import NprimerFunctions as n

    faultymatch = 'GGTTACGCCATTCCTTACACC'
    onematch = 'TCTTGGTTTTTGAATTTTGGCATG'
    NAmatch = 'NA'
    chromosome = 'X'  
    expectedfaultyPrimers1 = 2
    expectedfaultyPrimers2 = 1
    expectedfaultyPrimers3 = 1

    #test 1
    start = time.perf_counter()
    matchcount1= n.BLASTprimer(faultymatch, 'X')
    stop = time.perf_counter()
    
    if matchcount1 == expectedfaultyPrimers1:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"ran function for problem case in {stop - start:0.4f} seconds. Test has {testSuccess}.")
    
    #test 2
    start = time.perf_counter()
    matchcount1= n.BLASTprimer(onematch, 'X')
    stop = time.perf_counter()
    
    if matchcount1 == expectedfaultyPrimers2:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"ran function for one-match case in {stop - start:0.4f} seconds. Test has {testSuccess}.")

    #test 3
    start = time.perf_counter()
    matchcount1= n.BLASTprimer(NAmatch, 'X')
    stop = time.perf_counter()
    
    if matchcount1 == expectedfaultyPrimers3:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"ran function for NA case in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_findsixPrimers():

def test_BLASTiterator():

def test_addSixPrimers():

    import time
    import NprimerFunctions as n

    exampleTemplate = "CTGTGTCTTCAAAATTCTGGCGGCTGCGAGACGCGACAAAGGAAGTGAAACATTTTTATACTCGTTACTCGAAGAGTAAAAGGGTATACTCGATATAAAGTATATACATTCTTGATCCGGATCAATAGCCGTGTCGAGCTGGCGATTTGGTCCATCCGTCGGTCATTTCGTATGAACGTCTCGATCTCAGGAACTATAGAAGATGTTCTTTTACATTTTTGTTAGTTCTATAGATTTTATCGATTTGCCAAACAACTTTTCGGCACGCCCACCATCCGCCCACTACTGCCACGCTCACACTTTTGAAAGATGTGTAGATTTTTCTTCGTTTTATTGTTTATTTTGTAAATTTCTACCGCCATACCAAAAACACATTGGTTACGCCATTCCTTACACCTACTTTTGAATAATTTGAAACAATTTTTCTCATTCTATTCCCCAATATCTATTCCCATTCCCCCTAACTGAGTAACTGGTATCTGATAGTCGGGTAACTCGACCATAGCATTCTCTCTTGTTTAAACATAAAATTTCGGAACAATTCATAACAATTTTCCCGTTTGAATAACATTTGATTTTAGAATTTTTGACAAATTATATCTATAATATATAATATCATTTATTTCGAATATGGCTTCATTACATATCTTGGTTTTTGAATTTTGGCATGTAAGATGTTATTCCACTTTTACTCCCATTTTTTTATACAGTAGTATACAGTTTTGAAGAGAATTGAAATACATTTTAATCAAGATATAAATGGTTAGTAGTCTCTCTAAAATAACGATACCCAGAGCATGTGTATAGTACTCGTAGTATATATCCAGCTGTATGAGAAATTTGTAAGTGGAAAAACACGACATCTTATTAATACATTAGTCTGAAATTTATTCACATGGGAATGCTTAAAATAAAAGATTATACCGGAAAAGAAATGATCAAATACAACAGAGTAATTTTTGAGAACTTTCCTATTGGTTTTTTATTAATAACAGAAAAACGTATTATTTTCTAGGGAATCGGAATTTCAATATTTTGGAAATATAAAGAACTCCATTTGATTATAAAGACAGCAAATTAGGCATATTTGTAATTATCATCGCGTTTACAGTCAGAAAAGTACCAATATTGCAATTGAGTAGAAATATTCCTAATATGATTATGGTGACGTTGACATCCGAAGCTAAATCCCATTCGTCTTGAAAGGGCTTACAACAAATTCCGTATTTTTCCAGTGTGAAAAGGTATGAAACCCAAAAACGACATCCATGCAGGAGGCGCTAAGGGACGGAGGACGAGGACGATGGCTCCAGGGTCAGGTAGAAATAATCCAATTTAGAAACCGCTAGTCCAGCGCTAATCCGAAAACGTTTGCGACTCCCGTTCCCGTAGATGTGGATCAATGAATGAATCCGAAGGCTTTCATGAATCTGTTTGCGCGGCGATTAAAAGGGGAATGGATCGCTAATCCGCGTCCCAGGATACACGGGTAATCCTCGAGTTCAGCCTCTTCCTCTCGTATAAATAGATCGGCGGCCGGTGGACTGGTCACAGTCGTTTTACGAACTCAAACAGTGACACATATTGCAATATTATTACGATGGATACGACACCAATCTTCCAGTCCAGCTTCTCCATCCGATCGCTGCTCTCCGTGGACAAAAAGGAGGAGTCCCCCATTTCGAAGCACAACTCAGGAAGCAGCTTCAGCTCATGCTCGAGCTCCAGTTCCAACTCCAGCTCGGATTCGATGGCTGCAAAGAGCAATGCAAAGCCGGCTTTCACCTACAGCGCCCTCATAGTGATGGCCATCTGGAGCAGCTCCGAGAAGCGTTTGACCCTAAGCGGGATCTGCAAGTGGATCGCGGACAACTTCCCGTACTATCGCACCCGCAAGAGCGTCTGGCAGAACTCGATCCGGCACAACCTGAGTCTCAATCCGTTCTTCGTTCGGGTGCCGCGAGCTCTCGATGATCCTGGACGTGGCCACTACTGGGCACTCGATCCGTATGCCGAGGATCTGTCCATTGGCGAGACGACGGGACGCCTGCGCCGCAGCAATTGGCAGCAGAATACGGGGGCGAGACCCAAGGTCACAGGTCATCCCTATCAGCGAATGCCATATTATGGGCACGGGCACGGTAACGGCCCATATATCAAGGCACACAGCGCCTACTTCCCCATAATGGACCATCAACACCATGCCGCCATGGTGCAGCACTACCAGGCCATGATGCACAGATACCAGATGATGCCACATCCTCACCATCACCAGCATCAGCATCAGCATCAGCATCCTCATTCTCATTTCATTCAGCAATCAAAGCCCCTTCATATCCAGGAGCCATATCATCATACCCGCTACCATCTTCACCAAGAGTGAATTTCAGCAGTCTTAGAGGCGTGAAAACTCACTCAAAGACTACGAACTGTGAAAATTCCTTCTTGGCGTAGAACGCGGCAATGTTTTTAGCTTTAAATCATGTAGGGTAATATCCATAGAAACTATGCCCAGGCTTTAAAATATATCGTAGTAAACGTTACGTGCATTCTCATACAAAACTTTAGGTTGTTTTCAAATAAAGATGATTCGACATTCGAAGAATAGTGCGAAATTTTTATTGTATTTTGGTTTAGTGATTTATATATTTTGCTTATTTAAAAATTGAATTAATATTAACTGCCATTGAAAAATAAAACTTAATATCCGAAGAACTTTGTTCTTTTTTCTTAAATAAAATAGGGCATTTTCTGAAGACAATAATTTTGCATTTATATTGGACTTAAAACCGATTTGTACGAATATTGATTTAATTCCAGCAAAGTCCATATGCTAGTTTTTGTTTTGTGATATTCATGTGCGTTTCGTCACTACGTGAAACCCTAACCAACCGCAAAGCCCATGTATTGTTACAGCAGGTACATGCTACAACTGCTTTTTTTTTTTGGTTTTTAATTGCATCCCTGAAAACACTTGAATATTTCAACACAATTTAAATAAAGGACTTCCCAGCTGGTCTCGAGGATCCCAACTAGCCGCTATTCCGGGAAGTTTTCAACTGTTGAAAACTGTCGGTTGAAGCTGCATCGCCACGTTGGATACCACATCCAAATGCCGGCTGTAAATGACTTAAGTGCCTGGCATTTATCTGCTAAAACGTGTCCTGCTTTCGTCCTTGTCATCGTCACAGTTATTCACTTGG"
    expectedSixPrimers = 

    #test 1
    start = time.perf_counter()
    sixPrimers= n.addSixPrimers(exampleTemplate, 'X')
    stop = time.perf_counter()
    
    if sixPrimers == expectedSixPrimers:
        testSuccess = 'passed'
    else:
        testSuccess = 'failed'
    print(f"ran function for problem case in {stop - start:0.4f} seconds. Test has {testSuccess}.")

def test_finalPrimersdf():
    """
    Tests on a mock version of TFsdf (only 5 rows). Checks for case where full parameter set is returned.
    """
    import time
    import primersFunctions as u
    import pandas as pd

    TFsdf = pd.read_excel("inputfiles/mockMaterials/mock_TFsdf.xlsx", index_col = 0)
    outputFile = "inputfiles/mockMaterials/mockTFsdfwithPrimers.xlsx"

    start = time.perf_counter()
    faultyPrimers= u.finalPrimersdf(TFsdf, outputFile, returnParameters= True)
    stop = time.perf_counter()
    print(f"ran function for basic case in {stop - start:0.4f} seconds. Output is in mock materials.")

### Run tests ###
test_make_dataframe_from_TFs_list()
#this has been checked, and has ATG/stop codons at 1703 site.

test_designPrimers()
#Checked, returns: Ran functions in 0.0516 seconds. Test has passed.

test_stringencyIterate()
    #Test 1: Ran function for basic case of VAL-F in 0.5226 seconds. Test has passed.
    #Test 2: Ran function for the extended region and start = 1 case of VAL-F in 0.0759 seconds. Test has passed.
    
test_mountedPrimers()
#Checked, returns:
    #Test 1: Ran function for basic case of HAL-R in 0.0061 seconds. Test has passed.
    #Test 2: Ran function for makeMount case of HAL-R in 0.0048 seconds. Test has passed.
    #Test 3: Ran function for extendMount case of HAR-F in 0.0049 seconds. Test has passed.

test_BLASTprimer()
#Checked, returns:
   #ran function for problem case in 1.0437 seconds. Test has passed.
    #ran function for one-match case in 1.2853 seconds. Test has passed.
        #Skipping BLAST for 'NA' primer, NA
    #ran function for NA case in 0.6117 seconds. Test has passed.

test_addSixPrimers()
#Checked, ran function in 0.1743 seconds. Test has passed.

test_BLASTiterator()

test_addSixPrimers()

test_finalPrimersdf()
#Checked, returns ran function for basic case in 33.7917 seconds. Output is in mock materials.